{
    "streamlit_app.py": "aW1wb3J0IHN0cmVhbWxpdCBhcyBzdA0KaW1wb3J0IHBhbmRhcyBhcyBwZA0KaW1wb3J0IHBsb3RseS5leHByZXNzIGFzIHB4DQpmcm9tIFBJTCBpbXBvcnQgSW1hZ2UNCmltcG9ydCByYW5kb20NCg0KIyBGdW5jdGlvbiB0byBwYXJzZSBpbmdyZWRpZW50IHF1YW50aXRpZXMNCmRlZiBwYXJzZV9pbmdyZWRpZW50X3F1YW50aXRpZXMocXVhbnRpdGllc19zdHIpOg0KICAgIHF1YW50aXRpZXMgPSBxdWFudGl0aWVzX3N0ci5zcGxpdCgnLCcpDQogICAgcmV0dXJuIFtxLnN0cmlwKCkgZm9yIHEgaW4gcXVhbnRpdGllc10NCg0KZGVmIHNpbXVsYXRlX2luZ3JlZGllbnRfYW5hbHlzaXMoKToNCiAgICAjIFNpbXVsYXRlZCBjb21wdXRlciB2aXNpb24gYW5hbHlzaXMgZm9yIGEgTWFyZ2hlcml0YSBwaXp6YQ0KICAgIGRlc2NyaXB0aW9uID0gIiIiDQogICAgKipDb21wdXRlciBWaXNpb24gQW5hbHlzaXMgUmVwb3J0OiBNYXJnaGVyaXRhIFBpenphIElkZW50aWZpY2F0aW9uKioNCg0KICAgIC0gKipEb3VnaCBBbmFseXNpcyoqOiBDb25zaXN0ZW50IHdpdGggTWFyZ2hlcml0YSBwaXp6YSBzdGFuZGFyZHMuIENvbXBvc2l0aW9uIGluY2x1ZGVzIGZsb3VyLCB3YXRlciwgc2FsdCwgYW5kIHllYXN0LiBEb3VnaCB0aGlja25lc3MgYW5kIHRleHR1cmUgc3VnZ2VzdCBoYW5kLXN0cmV0Y2hlZCBwcmVwYXJhdGlvbi4NCiAgICANCiAgICAtICoqU2F1Y2UgRGV0ZWN0aW9uKio6IFRvbWF0byBzYXVjZSBpZGVudGlmaWVkLiBBbmFseXNpcyBzdWdnZXN0cyBhIGJsZW5kIG9mIGZyZXNoIHRvbWF0b2VzLCBnYXJsaWMsIGFuZCBvbGl2ZSBvaWwsIHdpdGggc2Vhc29uaW5nIHByb2ZpbGVzIG9mIHNhbHQgYW5kIGJhc2lsLiBTYXVjZSBsYXllcmluZyBpcyBldmVubHkgZGlzdHJpYnV0ZWQsIHR5cGljYWwgb2YgTWFyZ2hlcml0YSBwaXp6YXMuDQogICAgDQogICAgLSAqKkNoZWVzZSBJZGVudGlmaWNhdGlvbioqOiBGcmVzaCBtb3p6YXJlbGxhIGRldGVjdGVkLiBUaGUgdGV4dHVyZSBhbmQgbWVsdGluZyBwYXR0ZXJuIGFyZSBjaGFyYWN0ZXJpc3RpYyBvZiBoaWdoLXF1YWxpdHkgbW96emFyZWxsYSwgY29tbW9ubHkgdXNlZCBpbiB0cmFkaXRpb25hbCBNYXJnaGVyaXRhIHBpenphcy4NCiAgICANCiAgICAtICoqQmFzaWwgTGVhdmVzIFByZXNlbmNlKio6IEZyZXNoIGJhc2lsIGxlYXZlcyBvYnNlcnZlZC4gVGhlaXIgcGxhY2VtZW50IGFuZCBjb2xvcmF0aW9uIGFsaWduIHdpdGggcG9zdC1iYWtpbmcgYWRkaXRpb24sIHdoaWNoIGlzIGEgc2lnbmF0dXJlIHRyYWl0IG9mIGF1dGhlbnRpYyBNYXJnaGVyaXRhIHBpenphcy4NCiAgICANCiAgICAtICoqT2xpdmUgT2lsIFRyYWNlcyoqOiBFeHRyYSB2aXJnaW4gb2xpdmUgb2lsIGRldGVjdGVkLiBPaWwgZHJpenpsZSBwYXR0ZXJuIGlzIGNvbnNpc3RlbnQgd2l0aCB0eXBpY2FsIGZpbmlzaGluZyB0ZWNobmlxdWVzIHVzZWQgaW4gTWFyZ2hlcml0YSBwaXp6YSBwcmVwYXJhdGlvbi4NCg0KICAgICoqT3ZlcmFsbCBBc3Nlc3NtZW50Kio6IEhpZ2ggcHJvYmFiaWxpdHkgb2YgdGhlIGFuYWx5emVkIGltYWdlIGJlaW5nIGEgTWFyZ2hlcml0YSBwaXp6YS4gVGhlIGRldGVjdGVkIGluZ3JlZGllbnRzIGFuZCB0aGVpciBjaGFyYWN0ZXJpc3RpY3MgY2xvc2VseSBtYXRjaCB0aG9zZSBleHBlY3RlZCBpbiBhIHRyYWRpdGlvbmFsIE1hcmdoZXJpdGEgcGl6emEuDQogICAgIiIiDQogICAgcmV0dXJuIGRlc2NyaXB0aW9uDQoNCg0KDQojIE1haW4gcGFnZSBsYXlvdXQNCm1lbnUgPSBzdC5zaWRlYmFyLnNlbGVjdGJveCgnTWVudScsIFsnSG9tZScsICdPcmRlciBJbmZvcm1hdGlvbicsICdJbWFnZSBBbmFseXNpcyddKQ0KDQppZiBtZW51ID09ICJIb21lIjoNCiAgICBzdC5oZWFkZXIoIldlbGNvbWUgdG8gdGhlIFBpenphIEFuYWx5c2lzIEFwcCIpDQoNCmVsaWYgbWVudSA9PSAiT3JkZXIgSW5mb3JtYXRpb24iOg0KICAgIHN0LmhlYWRlcigiT3JkZXIgSW5mb3JtYXRpb24iKQ0KDQogICAgDQogICAgZGYgPSBwZC5yZWFkX2NzdihyJ0M6XFVzZXJzXExFTk9WTyBUQUNUSUxFXERvd25sb2Fkc1xsdXhlIC0gQ29waWUgKDIpXHVwZGF0ZWRfZm9vZC5jc3YnKQ0KDQoNCiAgICAjIFNpZGViYXIgZm9yIHNlbGVjdGluZyBhbiBpdGVtDQogICAgaXRlbV9uYW1lID0gc3Quc2VsZWN0Ym94KCdTZWxlY3QgYW4gSXRlbScsIGRmWydJdGVtIE5hbWUnXS51bmlxdWUoKSkNCg0KICAgICMgRmlsdGVyIGRhdGENCiAgICBmaWx0ZXJlZF9kYXRhID0gZGZbZGZbJ0l0ZW0gTmFtZSddID09IGl0ZW1fbmFtZV0uaWxvY1swXQ0KDQogICAgIyBQYXJzZSBpbmdyZWRpZW50cyBhbmQgdGhlaXIgcXVhbnRpdGllcw0KICAgIGluZ3JlZGllbnRzID0gZmlsdGVyZWRfZGF0YVsnSW5ncmVkaWVudHMnXS5zcGxpdCgnLCcpDQogICAgcXVhbnRpdGllcyA9IHBhcnNlX2luZ3JlZGllbnRfcXVhbnRpdGllcyhmaWx0ZXJlZF9kYXRhWydJbmdyZWRpZW50IFF1YW50aXRpZXMnXSkNCg0KICAgICMgRGF0YSBmb3IgcGxvdA0KICAgIHBsb3RfZGF0YSA9IHBkLkRhdGFGcmFtZSh7J0luZ3JlZGllbnQnOiBpbmdyZWRpZW50cywgJ1F1YW50aXR5JzogcXVhbnRpdGllc30pDQoNCiAgICAjIFZpc3VhbGl6YXRpb24NCiAgICBmaWcgPSBweC5iYXIocGxvdF9kYXRhLCB4PSdJbmdyZWRpZW50JywgeT0nUXVhbnRpdHknLCB0aXRsZT1mJ0luZ3JlZGllbnRzIGZvciB7aXRlbV9uYW1lfScsDQogICAgICAgICAgICAgICAgIGNvbG9yPSdJbmdyZWRpZW50JywgaG92ZXJfZGF0YT17J0luZ3JlZGllbnQnOiBUcnVlLCAnUXVhbnRpdHknOiBUcnVlfSkNCiAgICBmaWcudXBkYXRlX2xheW91dChwbG90X2JnY29sb3I9J3JnYmEoMCwwLDAsMCknLCANCiAgICAgICAgICAgICAgICAgICAgICB4YXhpc190aXRsZT0nSW5ncmVkaWVudCcsDQogICAgICAgICAgICAgICAgICAgICAgeWF4aXNfdGl0bGU9J1F1YW50aXR5JywNCiAgICAgICAgICAgICAgICAgICAgICB0aXRsZV94PTAuNSkNCiAgICBzdC5wbG90bHlfY2hhcnQoZmlnKQ0KDQogICAgIyBBZGRpdGlvbmFsIGluZm9ybWF0aW9uDQogICAgcHJlcF9tZXRob2QgPSBmaWx0ZXJlZF9kYXRhLmdldCgnRG91Z2ggSGFuZGxpbmcnLCAiTm90IHNwZWNpZmllZCIpDQogICAgdGVtcCA9IGZpbHRlcmVkX2RhdGEuZ2V0KCdUZW1wZXJhdHVyZSBDb250cm9sJywgIk5vdCBzcGVjaWZpZWQiKQ0KICAgIGNvb2tpbmdfdGltZV90ZWNobmlxdWUgPSBmaWx0ZXJlZF9kYXRhLmdldCgnQ29va2luZyBUaW1lIGFuZCBUZWNobmlxdWUnLCAiTm90IHNwZWNpZmllZCIpDQoNCiAgICAjIENyZWF0ZSBhIERhdGFGcmFtZSBmb3IgdGhlIHRhYmxlDQogICAgdGFibGVfZGF0YSA9IHsNCiAgICAgICAgIkNhdGVnb3J5IjogWyJQcmVwYXJhdGlvbiBNZXRob2QiLCAiQ29va2luZyBUZW1wZXJhdHVyZSIsICJDb29raW5nIFRpbWUgYW5kIFRlY2huaXF1ZSJdLA0KICAgICAgICAiRGV0YWlscyI6IFtmIvCfkajigI3wn42zIHtwcmVwX21ldGhvZH0iLCBmIvCfjKHvuI8ge3RlbXB9wrBDIiwgZiLij7LvuI8ge2Nvb2tpbmdfdGltZV90ZWNobmlxdWV9Il0NCiAgICB9DQoNCiAgICB0YWJsZV9kZiA9IHBkLkRhdGFGcmFtZSh0YWJsZV9kYXRhKQ0KDQogICAgIyBEaXNwbGF5IHRoZSB0YWJsZQ0KICAgIHN0LnRhYmxlKHRhYmxlX2RmKQ0KDQplbGlmIG1lbnUgPT0gIkltYWdlIEFuYWx5c2lzIjoNCiAgICBzdC5oZWFkZXIoIlBpenphIEltYWdlIEFuYWx5c2lzIikNCiAgICB1cGxvYWRlZF9maWxlID0gc3QuZmlsZV91cGxvYWRlcigiVXBsb2FkIGFuIGltYWdlIG9mIGEgcGl6emEuLi4iLCB0eXBlPVsianBnIiwgInBuZyJdKQ0KICAgIGlmIHVwbG9hZGVkX2ZpbGUgaXMgbm90IE5vbmU6DQogICAgICAgIGltYWdlID0gSW1hZ2Uub3Blbih1cGxvYWRlZF9maWxlKQ0KICAgICAgICBzdC5pbWFnZShpbWFnZSwgY2FwdGlvbj0nVXBsb2FkZWQgUGl6emEgSW1hZ2UnLCB1c2VfY29sdW1uX3dpZHRoPVRydWUpDQoNCiAgICAgICAgIyBTaW11bGF0ZSBpbmdyZWRpZW50IGFuYWx5c2lzDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGFuYWx5c2lzX3Jlc3VsdCA9IHNpbXVsYXRlX2luZ3JlZGllbnRfYW5hbHlzaXMoKQ0KICAgICAgICAgICAgc3Qud3JpdGUoJ0FuYWx5c2lzIFJlc3VsdDonLCBhbmFseXNpc19yZXN1bHQpDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHN0LmVycm9yKGYiQW4gZXJyb3Igb2NjdXJyZWQ6IHtlfSIpDQo="
}